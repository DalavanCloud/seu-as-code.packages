/*
 *    Copyright (C) 2015 QAware GmbH
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

plugins {
    id "de.undercouch.download" version "3.2.0"
    id 'com.jfrog.bintray' version '1.2'
}

apply plugin: 'base'
apply plugin: 'maven-publish'

import de.undercouch.gradle.tasks.download.Download
import org.apache.tools.ant.filters.ReplaceTokens

task buildPackage(dependsOn: ['buildPackageWin','buildPackageMac', 'buildPackageLinux']) {}

task downloadArchiveWin(type: Download) {
    src "https://download.java.net/java/GA/jdk9/${version}/binaries/openjdk-${version}_windows-x64_bin.tar.gz"
    dest buildDir
}

task extractArchiveWin(type: Copy, dependsOn: downloadArchiveWin) {
    from { tarTree(resources.gzip("$buildDir/openjdk-${version}_windows-x64_bin.tar.gz")) }
    into "$buildDir/win"
}

task customizePackageWin(type: Copy, dependsOn: extractArchiveWin) {
    from("files/") {
        include '*.cmd'
        include '*.bat'
    }
    into "$buildDir/win"
    filter(ReplaceTokens, tokens: [version: version])
}

task buildPackageWin(type: Jar, dependsOn: customizePackageWin) {
    baseName project.name
    version version
    extension 'jar'
    classifier 'win'
    destinationDir buildDir
    from "$buildDir/win"
}

task downloadArchiveMac(type: Download) {
    src "https://download.java.net/java/GA/jdk9/${version}/binaries/openjdk-${version}_osx-x64_bin.tar.gz"
    dest buildDir
}

task extractArchiveMac(type: Copy, dependsOn: downloadArchiveMac) {
    from { tarTree(resources.gzip("$buildDir/openjdk-${version}_osx-x64_bin.tar.gz")) }
    into "$buildDir/mac"
    includeEmptyDirs = false
    eachFile { details ->
        def targetPath = (details.path.replace("jdk-${version}.jdk/Contents/Home", "jdk-${version}/"))
        details.path = targetPath
    }
}

task customizePackageMac(type: Copy, dependsOn: extractArchiveMac) {
  from("files/") {
        exclude '*.cmd'
        exclude '*.bat'
    }
    into "$buildDir/mac"
    filter(ReplaceTokens, tokens: [version: version])
}

task buildPackageMac(type: Jar, dependsOn: customizePackageMac) {
    baseName project.name
    version version
    extension 'jar'
    classifier 'mac'
    destinationDir buildDir
    from("$buildDir/mac") {
        exclude "jdk-${version}.jdk/"
    }
}

task downloadArchiveLinux(type: Download) {
    src "https://download.java.net/java/GA/jdk9/${version}/binaries/openjdk-${version}_linux-x64_bin.tar.gz"
    dest buildDir
}

task extractArchiveLinux(type: Copy, dependsOn: downloadArchiveLinux) {
    from { tarTree(resources.gzip("$buildDir/openjdk-${version}_linux-x64_bin.tar.gz")) }
    into "$buildDir/unix"
}

task customizePackageLinux(type: Copy, dependsOn: extractArchiveLinux) {
  from("files/") {
        exclude '*.cmd'
        exclude '*.bat'
    }
    into "$buildDir/unix"
    filter(ReplaceTokens, tokens: [version: version])
}

task buildPackageLinux(type: Jar, dependsOn: customizePackageLinux) {
    baseName project.name
    version version
    extension 'jar'
    classifier 'unix'
    destinationDir buildDir
    from "$buildDir/unix"
}


publishing {
    publications {
        maven(MavenPublication) {
            artifact buildPackageWin
            artifact buildPackageMac
            artifact buildPackageLinux
        }
    }
    repositories {
        // set the properties via -P to publish to your company repo
        maven {
            url = project.hasProperty('nexusUrl') ? project.nexusUrl : ''
            credentials {
                username = project.hasProperty('nexusUsername') ? project.nexusUsername : ''
                password = project.hasProperty('nexusPassword') ? project.nexusPassword : ''
            }
        }
    }
}

bintray {
    user = project.hasProperty('bintrayUsername') ? project.bintrayUsername : 'unknown'
    key = project.hasProperty('bintrayApiKey') ? project.bintrayApiKey : 'unknown'
    publications = ['maven']
    publish = true
    dryRun = false
    pkg {
        repo = project.bintrayRepo
        name = project.name
        desc = project.description
        licenses = ['GPL-2.0+CE']
        labels = ['openjdk', 'seu-as-code', 'package']
        websiteUrl = project.websiteUrl
        issueTrackerUrl = project.issueTrackerUrl
        vcsUrl = project.scmUrl
        publicDownloadNumbers = true

        version {
            name = project.version
            desc = "${project.description} ${project.version}"
            released = new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZZ")

            mavenCentralSync {
                sync = false
            }
        }
    }
}
